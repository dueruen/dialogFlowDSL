/*
 * generated by Xtext 2.24.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.mdsd.dialogFlow.DialogFlowPackage
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mmmi.mdsd.dialogFlow.Entity
import org.eclipse.xtext.scoping.Scopes
import java.util.HashSet
import dk.sdu.mmmi.mdsd.dialogFlow.DialogFlowSystem
import java.util.ArrayList
import dk.sdu.mmmi.mdsd.dialogFlow.Declaration
import dk.sdu.mmmi.mdsd.dialogFlow.ActionValue
import dk.sdu.mmmi.mdsd.dialogFlow.Mapping
import dk.sdu.mmmi.mdsd.dialogFlow.SystemEntity

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DialogFlowScopeProvider extends AbstractDialogFlowScopeProvider {
	override getScope(EObject context, EReference reference) {		
		if(context instanceof ActionValue && reference==DialogFlowPackage.Literals.ACTION_VALUE__TYPE) {
			val seen = new HashSet<DialogFlowSystem>
			var diaSystem = EcoreUtil2.getContainerOfType(context,DialogFlowSystem)
			val candidates = new ArrayList<Declaration>
			while(diaSystem!==null) {
				if(seen.contains(diaSystem)) return super.getScope(context, reference) // scope undefined
				seen.add(diaSystem)
				candidates.addAll(diaSystem.declarations.filter(Entity))
				candidates.addAll(diaSystem.declarations.filter(SystemEntity))
				diaSystem = diaSystem.zuper
			}
			return Scopes.scopeFor(candidates)			
		}
		
		if(context instanceof Mapping && reference==DialogFlowPackage.Literals.MAPPING__ENTITY) {
			val seen = new HashSet<DialogFlowSystem>
			var diaSystem = EcoreUtil2.getContainerOfType(context,DialogFlowSystem)
			val candidates = new ArrayList<Declaration>
			while(diaSystem!==null) {
				if(seen.contains(diaSystem)) return super.getScope(context, reference) // scope undefined
				seen.add(diaSystem)
				candidates.addAll(diaSystem.declarations.filter(Entity))
				candidates.addAll(diaSystem.declarations.filter(SystemEntity))
				diaSystem = diaSystem.zuper
			}
			return Scopes.scopeFor(candidates)						
		}		
		
		return super.getScope(context, reference)
	}
}
